// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go
//
// Generated by this command:
//
//	mockgen -typed -source=./clients.go -destination=./mock_clients.go -package=dynamic -self_package github.com/radius-project/radius/pkg/dynamicrp/backend/controller/dynamic apiVersionsClient
//

// Package dynamic is a generated GoMock package.
package dynamic

import (
	context "context"
	reflect "reflect"

	v20231001preview "github.com/radius-project/radius/pkg/ucp/api/v20231001preview"
	gomock "go.uber.org/mock/gomock"
)

// MockapiVersionsClient is a mock of apiVersionsClient interface.
type MockapiVersionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockapiVersionsClientMockRecorder
}

// MockapiVersionsClientMockRecorder is the mock recorder for MockapiVersionsClient.
type MockapiVersionsClientMockRecorder struct {
	mock *MockapiVersionsClient
}

// NewMockapiVersionsClient creates a new mock instance.
func NewMockapiVersionsClient(ctrl *gomock.Controller) *MockapiVersionsClient {
	mock := &MockapiVersionsClient{ctrl: ctrl}
	mock.recorder = &MockapiVersionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockapiVersionsClient) EXPECT() *MockapiVersionsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockapiVersionsClient) Get(ctx context.Context, planeName, resourceProviderName, resourceTypeName, apiVersionName string, options *v20231001preview.APIVersionsClientGetOptions) (v20231001preview.APIVersionsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, planeName, resourceProviderName, resourceTypeName, apiVersionName, options)
	ret0, _ := ret[0].(v20231001preview.APIVersionsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockapiVersionsClientMockRecorder) Get(ctx, planeName, resourceProviderName, resourceTypeName, apiVersionName, options any) *MockapiVersionsClientGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockapiVersionsClient)(nil).Get), ctx, planeName, resourceProviderName, resourceTypeName, apiVersionName, options)
	return &MockapiVersionsClientGetCall{Call: call}
}

// MockapiVersionsClientGetCall wrap *gomock.Call
type MockapiVersionsClientGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockapiVersionsClientGetCall) Return(arg0 v20231001preview.APIVersionsClientGetResponse, arg1 error) *MockapiVersionsClientGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockapiVersionsClientGetCall) Do(f func(context.Context, string, string, string, string, *v20231001preview.APIVersionsClientGetOptions) (v20231001preview.APIVersionsClientGetResponse, error)) *MockapiVersionsClientGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockapiVersionsClientGetCall) DoAndReturn(f func(context.Context, string, string, string, string, *v20231001preview.APIVersionsClientGetOptions) (v20231001preview.APIVersionsClientGetResponse, error)) *MockapiVersionsClientGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
